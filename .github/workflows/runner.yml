name: Run AutoCodeReview Bot

on:
  pull_request: 
    branches: 
    - main

jobs:
  execute:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EUDOROS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts

    - name: Install dependencies
      run: pip install -r AutoCodeReviews/requirements.txt

    - name: Run Diff
      run: |
        cd $GITHUB_WORKSPACE
        git fetch origin main
        git diff origin/main > diffs.txt

    - name: Run Script
      run: |
        cd AutoCodeReviews
        export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
        python main.py ../diffs.txt $GITHUB_WORKSPACE $GITHUB_WORKSPACE/review.json

    - name: Post Coverage Report
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const aiComments = JSON.parse(fs.readFileSync('${{ github.workspace }}/review.json', 'utf8'));

          const botUser = 'github-actions[bot]'; // GitHub Actions user
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const pull_number = context.payload.pull_request.number;

          /**
          * Deletes review comments made by the Action.
          */
          async function deleteReviewComments(review_id) {
              let page = 1;
              const per_page = 100;
              let comments;

              do {
                  comments = await github.rest.pulls.listReviewComments({
                      owner,
                      repo,
                      pull_number,
                      review_id,
                      page,
                      per_page,
                  });

                  for (const comment of comments.data) {
                      if (comment.user.login === botUser) {
                          console.log(`Deleting review comment #${comment.id} by ${botUser}`);
                          await github.rest.pulls.deleteReviewComment({
                              owner,
                              repo,
                              comment_id: comment.id,
                          });
                      }
                  }

                  page += 1;
              } while (comments.data.length === per_page);
          }

          async function cleanPreviousReviews() {
              const reviews = await github.rest.pulls.listReviews({
                  owner,
                  repo,
                  pull_number,
              });

              for (const review of reviews.data) {
                  if (review.user.login === botUser && review.state === "COMMENT") {
                      console.log(`Deleting comments of review #${review.id} by ${botUser}`);
                      deleteReviewComments(review.id);

                      console.log(`Dismissing review #${review.id} by ${botUser}`);
                      await github.rest.pulls.dismissReview({
                          owner,
                          repo,
                          pull_number,
                          review_id: review.id,
                          message: "Dismissing my previous review because of an update to this PR."
                      });
                  }
              }

          }

          // You may want to move this within the if statement.
          // In case it keeps adding reviews on every update/push to the branch.
          cleanPreviousReviews();
          if (aiComments.length > 0) {
              await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  commit_id: '${{ github.event.pull_request.head.sha }}',
                  body: "I found a couple of issues, see these comments.",
                  event: "COMMENT",
                  comments: aiComments,
              });
          } else {
              await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  commit_id: '${{ github.event.pull_request.head.sha }}',
                  body: "LGTM!",
                  event: "COMMENT",
              })
          }
          

