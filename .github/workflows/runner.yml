name: Run AutoCodeReview Bot

on:
  pull_request: 
    branches: 
    - main

jobs:
  execute:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EUDOROS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts

    - name: Install dependencies
      run: pip install -r AutoCodeReviews/requirements.txt

    - name: Run Diff
      run: |
        cd $GITHUB_WORKSPACE
        git fetch origin main
        git diff origin/main > diffs.txt

    - name: Run Script
      run: |
        cd AutoCodeReviews
        export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
        python main.py ../diffs.txt $GITHUB_WORKSPACE $GITHUB_WORKSPACE/review.json

    - name: Post Coverage Report
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const reviews = JSON.parse(fs.readFileSync('${{ github.workspace }}/review.json', 'utf8'));
          const botUser = 'github-actions[bot]'; // GitHub Actions user

          if (reviews.length > 0) {
              const existingReviews = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
              });

              for (const curReview of existingReviews.data) {
                if (curReview.user.login === botUser) {
                  console.log(`Dismissing review #${curReview.id} by ${botUser}`);
                  await github.rest.pulls.dismissReview({
                    owner,
                    repo,
                    pull_number,
                    review_id: curReview.id,
                  });
                }
              }


              await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  commit_id: '${{ github.event.pull_request.head.sha }}',
                  body: "I found a couple of issues, see these comments.",
                  event: "COMMENT",
                  comments: reviews,
              });

          } else {
              await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  commit_id: '${{ github.event.pull_request.head.sha }}',
                  body: "LGTM!",
                  event: "COMMENT",
              })
          }
          

